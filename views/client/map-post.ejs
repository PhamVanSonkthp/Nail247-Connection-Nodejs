<script
    src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBm53vg-b3uwe3Qt4kkGRARhPSEo-_NXFg&callback=initAutocomplete&libraries=places&v=weekly"
    async></script>

<script>
    //let map;
    //let markers = [];
    //let markersUpdate = [];


    var posPostJob;
    var posPostJobUpdate;

    function initAutocomplete() {
        const map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -33.8688, lng: 151.2195 },
            zoom: 13,
            mapTypeId: "roadmap",
        });
        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input");
        const searchBox = new google.maps.places.SearchBox(input);

        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
        });

        let markers = [];

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach((marker) => {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();

            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };

                const infowindow = new google.maps.InfoWindow({
                    content: place.name,
                });

                // Create a marker for each place.

                const marker = new google.maps.Marker({
                    map,
                    icon,
                    title: place.name,
                    position: place.geometry.location,
                })
                markers.push(
                    marker
                );

                infowindow.open({
                    anchor: marker,
                    map,
                    shouldFocus: false,
                });

                posPostJob = "{" + place.geometry.location.lng() + "," + place.geometry.location.lat() + "}"

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        // map update
    }

    function initAutocompleteUpdate() {

        posPostJobUpdate = "{" + (products[index_edit].location.coordinates[0] || 0) + "," + (products[index_edit].location.coordinates[1] || 0) + "}"

        const map = new google.maps.Map(document.getElementById("map_update"), {
            center: { lat: products[index_edit].location.coordinates[1] || 0, lng: products[index_edit].location.coordinates[0] || 0 },
            zoom: 13,
            mapTypeId: "roadmap",
        });
        // Create the search box and link it to the UI element.
        const input = document.getElementById("pac-input-update");
        const searchBox = new google.maps.places.SearchBox(input);

        //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds());
        });

        let markers = [];

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener("places_changed", () => {
            const places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }

            // Clear out the old markers.
            markers.forEach((marker) => {
                marker.setMap(null);
            });
            markers = [];

            // For each place, get the icon, name and location.
            const bounds = new google.maps.LatLngBounds();

            places.forEach((place) => {
                if (!place.geometry || !place.geometry.location) {
                    console.log("Returned place contains no geometry");
                    return;
                }

                const icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25),
                };

                const infowindow = new google.maps.InfoWindow({
                    content: place.name,
                });

                // Create a marker for each place.

                const marker = new google.maps.Marker({
                    map,
                    icon,
                    title: place.name,
                    position: place.geometry.location,
                })
                markers.push(
                    marker
                );

                infowindow.open({
                    anchor: marker,
                    map,
                    shouldFocus: false,
                });

                posPostJobUpdate = "{" + place.geometry.location.lng() + "," + place.geometry.location.lat() + "}"

                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });

        const myLatLng = { lat: products[index_edit].location.coordinates[1] || 0, lng: products[index_edit].location.coordinates[0] || 0 }

        new google.maps.Marker({
            position: myLatLng,
            map,
            title: "Hello World!",
        });

        // map update
    }
</script>